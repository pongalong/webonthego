<?xml version="1.0" encoding="UTF-8"?>
<flow xmlns="http://www.springframework.org/schema/webflow" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.springframework.org/schema/webflow  
    http://www.springframework.org/schema/webflow/spring-webflow-2.0.xsd">

  <!-- DECLARE REQUIRED OBJECTS -->
  <var name="activation" class="com.tscp.mvna.domain.activation.Activation" />
  <var name="device" class="com.tscp.mvne.Device" />

  <on-start>
    <set name="activation.user" value="userManager.getCurrentUser()" />
    <set name="conversationScope.user" value="activation.user" />
  </on-start>

  <action-state id="fetchUnlinkedAccount">
    <evaluate expression="simpleActivationManager.getUnlinkedAccount(activation.user)" result="flowScope.unlinkedAccount" />
    <transition on="success" to="hasUnlinkedAccount">
      <set name="activation.account" value="unlinkedAccount" />
    </transition>
  </action-state>

  <decision-state id="hasUnlinkedAccount">
    <if test="unlinkedAccount == null" then="requestDeviceInfo" else="completePreviousActivation" />
  </decision-state>

  <view-state id="completePreviousActivation" view="activate/completePreviousActivation">
    <transition on="submit" to="requestDeviceInfo_previousActivation" />
  </view-state>

  <view-state id="requestDeviceInfo_previousActivation" view="activate/requestDevice" model="device">
    <on-entry>
      <set name="activation.device" value="device" />
      <evaluate expression="simpleActivationManager.trace('User {} has begun activation', activation.user.email)" />
      <evaluate expression="activation.device.setLabel(simpleActivationManager.getSuggestedName(activation.user.contactInfo.firstName))" />
    </on-entry>
    <transition on="submit" to="activateDevice">
      <evaluate expression="simpleActivationManager.trace('ESN {} queued for activation. Using previously unlinked account.', activation.device.value)" />
    </transition>
  </view-state>

  <!-- Request user to input device -->
  <view-state id="requestDeviceInfo" view="activate/requestDevice" model="device">
    <on-entry>
      <set name="activation.device" value="device" />
      <evaluate expression="simpleActivationManager.trace('User {} has begun activation', activation.user.email)" />
      <evaluate expression="activation.device.setLabel(simpleActivationManager.getSuggestedName(activation.user.contactInfo.firstName))" />
    </on-entry>
    <transition on="submit" to="chooseOrRequestPaymentMethod">
      <evaluate expression="simpleActivationManager.trace('ESN {} queued for activation', activation.device.value)" />
    </transition>
  </view-state>

  <!-- Choose an existing payment method or enter a new one -->
  <subflow-state id="chooseOrRequestPaymentMethod" subflow="chooseOrRequestPaymentMethod">
    <input name="user" value="activation.user" />
    <transition on="success" to="createAccount">
      <set name="activation.creditCardPayment" value="currentEvent.attributes.creditCardPayment" />
    </transition>
  </subflow-state>

  <!-- Create account for activation based on payment method information -->
  <action-state id="createAccount">
    <evaluate expression="simpleActivationManager.createShellAccount(activation)" result="conversationScope.createdAccount" />
    <transition on="success" to="applyCoupon">
      <set name="activation.account" value="createdAccount" />
    </transition>
    <transition on-exception="com.trc.exception.management.AccountManagementException" to="generalError" />
    <transition on-exception="com.trc.exception.management.AddressManagementException" to="generalError" />
  </action-state>

  <!-- Apply coupon if exists -->
  <action-state id="applyCoupon">
    <evaluate expression="simpleActivationManager.applyCoupon(activation)" />
    <transition on="success" to="takePayment" />
    <transition on-exception="com.trc.exception.management.CouponManagementException" to="editPaymentMethod_applyCoupon">
      <evaluate expression="simpleActivationManager.addFlowError('flow.coupon.apply', null)" />
    </transition>
  </action-state>

  <!-- Take payment -->
  <action-state id="takePayment">
    <evaluate expression="simpleActivationManager.makeActivationPayment(activation)" result="flowScope.paymentUnitResponse" />
    <transition on="success" to="applyContract" />
    <transition on-exception="com.trc.exception.service.PaymentFailureException" to="editPaymentMethod_takePayment">
      <evaluate expression="simpleActivationManager.addFlowError(rootCauseException.authCode)" />
    </transition>
    <transition on-exception="com.trc.exception.management.PaymentManagementException" to="editPaymentMethod_takePayment">
      <evaluate expression="simpleActivationManager.addFlowError('flow.payment.submit', null)" />
    </transition>
  </action-state>

  <!-- Apply contract if exists -->
  <action-state id="applyContract">
    <evaluate expression="simpleActivationManager.applyContract(activation)" />
    <transition on="success" to="activateDevice" />
    <transition on-exception="com.trc.exception.management.CouponManagementException" to="editPaymentMethod_applyCoupon">
      <evaluate expression="simpleActivationManager.addFlowError('flow.coupon.apply', null)" />
    </transition>
  </action-state>

  <subflow-state id="activateDevice" subflow="activateDevice">
    <input name="activation" value="activation" />
    <transition on="success" to="createService" />
    <transition on="unsuccessfulDeviceAddition" to="editDeviceInfo_activateDevice">
      <evaluate expression="simpleActivationManager.trace('unsuccessful device addition', null)" />
      <evaluate expression="simpleActivationManager.addFlowError('flow.device.add', null)" />
    </transition>
    <transition on="unsuccessfulReservation" to="editDeviceInfo_activateDevice">
      <evaluate expression="simpleActivationManager.trace('unsuccessful device reservation', null)" />
      <evaluate expression="simpleActivationManager.addFlowError('flow.device.reservation', null)" />
    </transition>
    <transition on="unsuccessfulActivation" to="editDeviceInfo_activateDevice">
      <evaluate expression="simpleActivationManager.trace('unsuccessful device activation', null)" />
      <evaluate expression="simpleActivationManager.addFlowError('flow.device.activation', null)" />
    </transition>
  </subflow-state>

  <action-state id="createService">
    <evaluate expression="simpleActivationManager.createService(activation)" />
    <transition on="success" to="sendNotification" />
    <transition on-exception="com.trc.exception.management.DeviceManagementException" to="rollbackDeviceActivation1" />
  </action-state>

  <action-state id="sendNotification">
    <evaluate expression="simpleActivationManager.sendActivationNotice(activation)" />
    <transition on="success" to="success">
      <evaluate expression="simpleActivationManager.refreshCache(activation)" />
    </transition>
  </action-state>

  <!-- Re-request payment info if there is an error during payment processing -->
  <subflow-state id="editPaymentMethod_takePayment" subflow="requestPaymentMethod">
    <input name="creditCardPayment_edit" value="activation.creditCardPayment" />
    <transition on="success" to="takePayment">
      <set name="activation.creditCardPayment" value="currentEvent.attributes.createdCreditCardPayment" />
    </transition>
  </subflow-state>

  <subflow-state id="editPaymentMethod_applyCoupon" subflow="requestPaymentMethod">
    <input name="creditCardPayment_edit" value="activation.creditCardPayment" />
    <transition on="success" to="applyCoupon">
      <set name="activation.creditCardPayment" value="currentEvent.attributes.createdCreditCardPayment" />
    </transition>
  </subflow-state>

  <!-- Re-request user to input device -->
  <view-state id="editDeviceInfo_activateDevice" view="activate/requestDevice" model="device">
    <transition on="submit" to="activateDevice">
      <evaluate expression="simpleActivationManager.trace('ESN {} queued for activation', activation.device.value)" />
    </transition>
  </view-state>

  <!-- Rollback device activation if creation of service in Kenan fails -->
  <action-state id="rollbackDeviceActivation1">
    <evaluate expression="simpleActivationManager.removeDevice(activation)" />
    <transition on="success" to="rollbackDeviceActivation2" />
    <transition on-exception="com.trc.exception.management.DeviceManagementException" to="generalError" />
  </action-state>

  <action-state id="rollbackDeviceActivation2">
    <evaluate expression="simpleActivationManager.releaseMdn(activation)" />
    <transition on="success" to="editDeviceInfo_activateDevice">
      <evaluate expression="simpleActivationManager.addFlowError('flow.device.service', null)" />
    </transition>
    <transition on-exception="com.trc.exception.management.DeviceDisconnectException" to="generalError">
      <evaluate expression="simpleActivationManager.sendDisconnectExceptionNotice(activation)" />
    </transition>
  </action-state>

  <!-- END STATES -->
  <end-state id="generalError" view="exception/uncaughtException" />

  <end-state id="success" view="activate/success" />

  <end-state id="cancel" view="externalRedirect:contextRelative:/" />

  <!-- Global Transitions -->
  <global-transitions>
    <transition on="cancel" to="cancel" validate="false" />
    <transition on="generalError" to="generalError" validate="false" />
  </global-transitions>
</flow>