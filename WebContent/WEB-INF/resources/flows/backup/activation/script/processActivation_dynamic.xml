<?xml version="1.0" encoding="UTF-8"?>
<flow xmlns="http://www.springframework.org/schema/webflow" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.springframework.org/schema/webflow  
    http://www.springframework.org/schema/webflow/spring-webflow-2.0.xsd">

  <input name="registration" type="com.trc.user.activation.Registration" />
  <input name="account" type="com.tscp.mvne.Account" />
  <input name="activationMessage" type="com.trc.user.activation.ActivationMessage" />
  <input name="deviceInfo" type="com.tscp.mvne.Device" />
  <input name="networkInfo" type="com.tscp.mvne.NetworkInfo" />
  <input name="creditCardPayment" type="com.trc.user.activation.CreditCardPayment" />

  <!-- BEGIN PROCESSING -->
  <view-state id="processing_createShellAccount" view="activation/processing/processingMessage" model="activationMessage">
    <on-entry>
      <evaluate expression="activationMessage.setMessageCreateBilling()" />
    </on-entry>
    <transition on="autoSubmit" to="createShellAccount" validate="false" />
  </view-state>

  <subflow-state id="createShellAccount" subflow="createShellAccount">
    <input name="user" type="com.trc.user.User" value="registration.user" />
    <input name="account" type="com.tscp.mvne.Account" value="account" />
    <transition on="success" to="processing_testActivation">
      <evaluate expression="activationLogger.logCreateBilling()" />
    </transition>
  </subflow-state>

  <view-state id="processing_testActivation" view="activation/processing/processingMessage" model="activationMessage">
    <on-entry>
      <evaluate expression="activationMessage.setMessageTestingActivation()" />
    </on-entry>
    <transition on="autoSubmit" to="testActivation" validate="false" />
  </view-state>

  <subflow-state id="testActivation" subflow="testActivation">
    <input name="user" value="registration.user" />
    <input name="account" value="account" />
    <input name="deviceInfo" value="deviceInfo" />
    <input name="networkInfo" value="networkInfo" />
    <transition on="success" to="processing_makeActivationPayment">
      <evaluate expression="activationLogger.logTestActivation()" />
    </transition>
  </subflow-state>

  <view-state id="processing_makeActivationPayment" view="activation/processing/processingMessage" model="activationMessage">
    <on-entry>
      <evaluate expression="activationMessage.setMessagePayment()" />
    </on-entry>
    <transition on="autoSubmit" to="fetchCoupon" validate="false" />
  </view-state>

  <action-state id="fetchCoupon">
    <evaluate expression="couponFlowManager.getCouponByCode(creditCardPayment.coupon)" result="flowScope.fetchedCoupon" />
    <transition on="success" to="setCoupon" />
  </action-state>

  <action-state id="setCoupon">
    <evaluate expression="couponFlowManager.setCoupon(creditCardPayment.coupon, fetchedCoupon)" />
    <transition on="success" to="hasCoupon" />
  </action-state>

  <decision-state id="hasCoupon">
    <on-entry>
      <evaluate expression="activationLogger.logHasCoupon(creditCardPayment.coupon)" />
    </on-entry>
    <if test="creditCardPayment.coupon.isEmpty()" then="makeActivationPayment" else="isCouponPayment" />
  </decision-state>

  <decision-state id="isCouponPayment">
    <on-entry>
      <evaluate expression="activationLogger.logIsCouponPayment()" />
    </on-entry>
    <if test="creditCardPayment.coupon.isPayment()" then="applyCouponPayment" else="makeActivationPayment" />
  </decision-state>

  <action-state id="applyCouponPayment">
    <on-entry>
      <evaluate expression="activationLogger.logApplyCouponPayment()" />
    </on-entry>
    <evaluate expression="couponFlowManager.applyCouponPayment(creditCardPayment.coupon,registration.user, account)" />
    <transition on="success" to="addCreditCard" />
  </action-state>

  <action-state id="addCreditCard">
    <on-entry>
      <evaluate expression="creditCardPayment.creditCard.setPaymentid(0)" />
    </on-entry>
    <evaluate expression="paymentFlowManager.addPaymentMethod(registration.user, creditCardPayment.creditCard)" />
    <transition on="success" to="processing_activateService" />
    <transition on-exception="com.trc.exception.WebFlowException" to="re-requestCreditCardInfo" />
  </action-state>

  <subflow-state id="re-requestCreditCardInfo" subflow="addCreditCard_noAction">
    <input name="user" value="registration.user" />
    <input name="creditCard" value="creditCardPayment.creditCard" />
    <transition on="success" to="isExistingCard" />
  </subflow-state>

  <decision-state id="isExistingCard">
    <if test="paymentFlowManager.isExistingCard(creditCardPayment.creditCard)" then="processing_activateService" else="addCreditCard" />
  </decision-state>

  <subflow-state id="makeActivationPayment" subflow="makeActivationPayment">
    <input name="user" value="registration.user" />
    <input name="account" value="account" />
    <input name="creditCard" value="creditCardPayment.creditCard" />
    <transition on="success" to="processing_activateService">
      <evaluate expression="activationLogger.logPayment()" />
    </transition>
  </subflow-state>

  <view-state id="processing_activateService" view="activation/processing/processingMessage" model="activationMessage">
    <on-entry>
      <evaluate expression="activationMessage.setMessageActivation()" />
    </on-entry>
    <transition on="autoSubmit" to="activateService" validate="false" />
  </view-state>

  <subflow-state id="activateService" subflow="activateService">
    <input name="user" value="registration.user" />
    <input name="account" value="account" />
    <input name="deviceInfo" value="deviceInfo" />
    <input name="networkInfo" value="networkInfo" />
    <transition on="success" to="processing_createService">
      <evaluate expression="activationLogger.logActivation()" />
    </transition>
  </subflow-state>

  <view-state id="processing_createService" view="activation/processing/processingMessage" model="activationMessage">
    <on-entry>
      <evaluate expression="activationMessage.setMessageCreateService()" />
    </on-entry>
    <transition on="autoSubmit" to="createService" validate="false" />
  </view-state>

  <action-state id="createService">
    <evaluate expression="deviceFlowManager.createServiceInstance(account, networkInfo)" />
    <transition on="success" to="checkCouponContract">
      <evaluate expression="activationLogger.logCreateService()" />
    </transition>
    <transition on-exception="com.trc.exception.WebFlowException" to="generalError" />
  </action-state>

  <decision-state id="checkCouponContract">
    <on-entry>
      <evaluate expression="activationLogger.logCheckCouponContract()" />
    </on-entry>
    <if test="creditCardPayment.coupon.isContract()" then="applyContract" else="processing_enableUser" />
  </decision-state>

  <action-state id="applyContract">
    <on-entry>
      <evaluate expression="activationLogger.logApplyContract()" />
    </on-entry>
    <evaluate expression="couponFlowManager.applyCoupon(creditCardPayment.coupon, registration.user, account, networkInfo.mdn)" />
    <transition on="success" to="processing_enableUser" />
  </action-state>

  <view-state id="processing_enableUser" view="activation/processing/processingMessage" model="activationMessage">
    <on-entry>
      <evaluate expression="activationMessage.setMessageEnableUser()" />
    </on-entry>
    <transition on="autoSubmit" to="enableUser" validate="false" />
  </view-state>

  <action-state id="enableUser">
    <evaluate expression="userManager.enableUser(registration.user)" />
    <transition on="success" to="processing_saveUser">
      <evaluate expression="activationLogger.logEnableUser()" />
    </transition>
  </action-state>

  <view-state id="processing_saveUser" view="activation/processing/processingMessage" model="activationMessage">
    <on-entry>
      <evaluate expression="activationMessage.setMessageSaveUser()" />
    </on-entry>
    <transition on="autoSubmit" to="saveUser" validate="false" />
  </view-state>

  <action-state id="saveUser">
    <evaluate expression="userManager.updateUser(registration.user)" />
    <transition on="success" to="sendWebServiceActivationEmail">
      <evaluate expression="activationLogger.logSaveUser()" />
    </transition>
    <transition on-exception="com.trc.exception.management.UserManagementException" to="generalError" />
  </action-state>

  <action-state id="sendWebServiceActivationEmail">
    <evaluate expression="registrationManager.sendActivationEmail(registration.user, account)" />
    <transition on="success" to="success">
      <evaluate expression="activationLogger.logWelcome()" />
    </transition>
    <transition on-exception="com.trc.exception.WebFlowException" to="generalError" />
  </action-state>

  <!-- END STATES -->
  <end-state id="generalError" view="exception/uncaughtException" />

  <end-state id="success" view="activation/registration/success">
    <on-entry>
      <evaluate expression="activationLogger.finishLogging()" />
    </on-entry>
  </end-state>

  <end-state id="cancel" view="externalRedirect:contextRelative:/">
    <on-entry>
      <evaluate expression="registrationManager.cancelRegistration(registration)" />
    </on-entry>
  </end-state>

  <!-- Global Transitions -->
  <global-transitions>
    <transition on="cancel" to="cancel" validate="false" />
    <transition on="generalError" to="generalError" validate="false" />
  </global-transitions>

</flow> 